<!DOCTYPE HTML>
<!--  -->
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="pml" content="junctionVar Test" />

	<title>junctionVar Test</title>
<script src="../junctionVar.js" > </script>
<script type="text/javascript">
/*
                                      \   /
                                   test   junctionVar
                                      /   \     

*/
// active lib apend et raw pour test:
    if (!mu)var mu = {}
    lib(mu)//active le module
    lib(Object)//active append sur Object
    var oneJunctionVarF
    var myJunctionVarF
    raw()//Raw, (exemple sur myJunctionVarF non générique)
// lance les tests
testRaw()//Raw, non automatisée, version la plus simple et rapide
testLib()//Lib par function junctionVar 
testAppend()//Append sur Object => junctionVar (get)

/*
                                      \   /
                                 append   test
                                      /   \     
*/
function testAppend(){
//écritiure
    var unObjet = new testObj("test")
    var a = unObjet.junctionVarF
    // autre écriture
    var a = new testObj("test").junctionVarF
    // autre écriture
    var a =  Object.junctionVarF (new testObj("test"))
//test    
    function testObj(data){this.test = data}
    testObj.prototype.test="origine"  
    var b = a, c=a
    var t =new testObj("test b ")
    console.log (a.test,b.test,c.test,t.test)
    b(t)
    console.log (a.test,b.test,c.test,t.test)
    c (new testObj("test c "))
    console.log (a.test,b.test,c.test,t.test)
    b.test = "masque"//masque pour toujours test 
    console.log (a.test,b.test,c.test,t.test)
    delete a.test //démasque pour toujour test
    delete a.test //delete ne supprime pas le prototype excepté avec ...prototype.test par exemple
    console.log (a.test,b.test,c.test,t.test)

    console.log("fin recherche 3")
}
/*
                                      \   /
                                    lib   test
                                      /   \     
*/
function testLib(){
//écritiure
    var a = mu.junctionVarF()
    a (new testObj("test"))
    //autre écriture
    var a = mu.junctionVarF(new testObj("test"))
//test
    function testObj(data){this.test = data}
    testObj.prototype.test="origine"  
    var b = a, c=a
    var t =new testObj("test b ")
    b(t)
    console.log (a.test,b.test,c.test,t.test)
    c (new testObj("test c "))
    console.log (a.test,b.test,c.test,t.test)
    b.test = "masque"//masque pour toujours test 
    console.log (a.test,b.test,c.test,t.test)
    delete a.test //démasque pour toujour test
    delete a.test //delete ne supprime pas le prototype excepté avec ...prototype.test par exemple
    console.log (a.test,b.test,c.test,t.test)

    console.log("fin recherche 2")
}
/*
                                      \   /
                                    raw   test
                                      /   \     
*/
function testRaw(){
//test
    function testObj(data){this.test = data}
    testObj.prototype.test="origine"  
    myJunctionVarF (new testObj("test"))
    var b = myJunctionVarF, c=myJunctionVarF
    var t =new testObj("test b ")
    b(t)
    console.log (myJunctionVarF.test,b.test,c.test,t.test)
    c (new testObj("test c "))
    console.log (myJunctionVarF.test,b.test,c.test,t.test)
    b.test = "masque"//masque pour toujours test 
    console.log (myJunctionVarF.test,b.test,c.test,t.test)
    delete myJunctionVarF.test //démasque pour toujour test
    delete myJunctionVarF.test //delete ne supprime pas le prototype excepté avec ...prototype.test par exemple
    console.log (myJunctionVarF.test,b.test,c.test,t.test)

    myJunctionVarF ({test:"test"})
    var b = myJunctionVarF, c=myJunctionVarF
    console.log (myJunctionVarF.test,b.test,c.test)
    myJunctionVarF ({test:"test B "})
    console.log (myJunctionVarF.test,b.test,c.test)

//limite: ne marche que avec des type Object
    myJunctionVarF (new String("test"))
    var b = myJunctionVarF, c=myJunctionVarF
    console.log (myJunctionVarF,b,c)
    b (new String("test B "))
    console.log (myJunctionVarF,b,c)
    console.log("fin recherche 1")
}
</script>
</head>
<body>
<pre>

                                      \   /
                                   test   junctionVar
                                      /   \     
</pre>
</body>
</html>