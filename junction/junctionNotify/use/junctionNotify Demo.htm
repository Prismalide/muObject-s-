<!DOCTYPE HTML>
<!--  -->
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="pml" content="junctionVar Demo" />

	<title>junctionNotify Demo</title>
<script src="../junctionNotify.js" > </script>
<script type="text/javascript">
/*
                                      \   /
                                   demo   junctionNotify
                                      /   \     
*/
// active lib apend et raw pour test:
    if (!mu)var mu = {}
    lib(mu)//active le module
    lib(Object)//active append sur Object

// init demo    
    var body = document.getElementsByTagName("body")[0]
    function testObj(data){this.test = data}
        testObj.prototype.test = "origine"  
        testObj.prototype.testT = "origineT"  
        testObj.prototype.test2 = "origine 2"
        testObj.prototype.functionTest = function (){console.log ("this: ",this); return this.test}
// lance les demos
    demoLib(console, body)//Lib par function junctionNotify 
    demoAppend(console, body)//Append sur Object => junctionNotify (get)
/*
                                      \   /
                                   algo   demo
                                      /   \     
*/
function algoDemo(console, body, oneJunction, secondJunction){
    var b = oneJunction, c=oneJunction
    var t =new testObj("test t ")
    b(t)//initialise contenu var de junction
console.log ( oneJunction.test, b.test, c.test, t.test, b.testT)
    b.test = "masque b"//masque prototype test 
console.log (oneJunction.test, b.test, c.test, t.test, b.testT)
    t.test = "masque t"//masque prototype test 
    t.testT = "masqueT"
console.log ( oneJunction.test, b.test, c.test, t.test, b.testT)
    delete oneJunction.test //démasque test, reste propriété propre d'obj par t.test
console.log ( oneJunction.test, b.test, c.test, t.test, b.testT)
    b.test = "masque b"//masque prototype test 
console.log (oneJunction.test, b.test, c.test, t.test, b.testT)
    c("")//test clear propriétés propres junction
console.log (oneJunction.test, b.test, c.test, t.test, b.testT)
console.log (b.functionTest())
console.log ("t: ",t)
    b.test = "apply b"//masque prototype test 
//    c (new testObj("test c "))//change contenu var de junction
    c ({})//change contenu var de junction et test apply propriétés propres sur obj d'origine ici t
console.log ("t: ",t)//test apply propriétés propres sur obj d'origine ici t
console.log (oneJunction.test, b.test, c.test, t.test, b.testT)
    b.test = "conserve"//test conservation 
console.log ( oneJunction.test, b.test, c.test, t.test)
    c ({},true)//change contenu var de junction sans conservation propriétés propres et maj
console.log ("t: ",t)//t non affecté pas de conserve sur test de t

    oneJunction ({test:"test"})
    var b = oneJunction, c=oneJunction
console.log (oneJunction.test, b.test, c.test)
    oneJunction ({test:"test B "})
console.log (oneJunction.test, b.test, c.test)

//limite: ne marche que avec des type Object
    oneJunction (new String("test"))
    var b = oneJunction, c=oneJunction
console.log (oneJunction, b, c)
console.log (oneJunction.__proto__, b.__proto__, c.__proto__)//le String est sur __proto__
    b (new String("test B "))
console.log (oneJunction, b, c)
console.log (oneJunction.__proto__, b.__proto__, c.__proto__)//le String est sur __proto__
    }
/*
                                      \   /
                                 append   demo
                                      /   \     
*/
function demoAppend(console, body){
console.log("demoAppend")
//écritiure
    var unObjet = new testObj("test")
    var a = unObjet.junctionNotifyF
    // autre écriture
    var a = new testObj("test").junctionNotifyF
    // autre écriture
    var a =  Object.junctionNotifyF (new testObj("test"))
//test    
    algoDemo(console, body, a)
console.log("fin demoAppend")
}
/*
                                      \   /
                                    lib   demo
                                      /   \     
*/
function demoLib(console, body){
console.log("demoLib")
//écritiure
    var a = mu.junctionNotifyF()
    a (new testObj("test"))
    //autre écriture
    var a = mu.junctionNotifyF(new testObj("test"))
//test
    algoDemo(console, body, a)
console.log("fin demoLib")
}
</script>
</head>
<body>
<pre>
                                      \   /
                                   démo   junctionNotify
                                      /   \     
--algo:
</pre>
</body>
</html>